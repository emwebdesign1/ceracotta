generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========= Enums =========
enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  CARD
  TWINT
}

enum PaymentProvider {
  STRIPE
  TWINT
}

// ========= Mod√®les =========
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         Role     @default(CUSTOMER)
  firstName    String?
  lastName     String?
  username     String?  @unique
  phone        String?
  addressLine1 String?
  addressLine2 String?
  zip          String?
  city         String?
  country      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  cart   Cart?
  orders Order[]

  @@index([email])
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  description     String?
  characteristics Json?
  images          Json?
  price           Int
  stock           Int      @default(0)
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  // relations inverses
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@index([categoryId])
  @@index([createdAt])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  title     String
  unitPrice Int
  quantity  Int     @default(1)
  image     String?

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
}

model Order {
  id              String          @id @default(cuid())
  userId          String?
  amount          Int
  currency        String          @default("CHF")
  status          OrderStatus     @default(PENDING)
  paymentMethod   PaymentMethod
  paymentProvider PaymentProvider @default(STRIPE)
  paymentIntentId String?
  paymentStatus   String?
  shippingAddress Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user  User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  items OrderItem[]

  @@index([userId])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  title     String
  unitPrice Int
  quantity  Int
  image     String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}
